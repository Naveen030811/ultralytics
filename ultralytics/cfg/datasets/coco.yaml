# Ultralytics üöÄ AGPL-3.0 License - https://ultralytics.com/license

# COCO 2017 dataset https://cocodataset.org by Microsoft
# Documentation: https://docs.ultralytics.com/datasets/detect/coco/
# Example usage: yolo train data=coco.yaml
# parent
# ‚îú‚îÄ‚îÄ ultralytics
# ‚îî‚îÄ‚îÄ datasets
#     ‚îî‚îÄ‚îÄ coco  ‚Üê downloads here (20.1 GB)

# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: ../datasets/coco
train: val2017.txt  # Use val images as training data
val: val2017.txt 

# Classes
names:
  0: person
  1: bicycle
  2: car
  3: motorcycle
  4: airplane
  5: bus
  6: train
  7: truck
  8: boat
  9: traffic light
  10: fire hydrant
  11: stop sign
  12: parking meter
  13: bench
  14: bird
  15: cat
  16: dog
  17: horse
  18: sheep
  19: cow
  20: elephant
  21: bear
  22: zebra
  23: giraffe
  24: backpack
  25: umbrella
  26: handbag
  27: tie
  28: suitcase
  29: frisbee
  30: skis
  31: snowboard
  32: sports ball
  33: kite
  34: baseball bat
  35: baseball glove
  36: skateboard
  37: surfboard
  38: tennis racket
  39: bottle
  40: wine glass
  41: cup
  42: fork
  43: knife
  44: spoon
  45: bowl
  46: banana
  47: apple
  48: sandwich
  49: orange
  50: broccoli
  51: carrot
  52: hot dog
  53: pizza
  54: donut
  55: cake
  56: chair
  57: couch
  58: potted plant
  59: bed
  60: dining table
  61: toilet
  62: tv
  63: laptop
  64: mouse
  65: remote
  66: keyboard
  67: cell phone
  68: microwave
  69: oven
  70: toaster
  71: sink
  72: refrigerator
  73: book
  74: clock
  75: vase
  76: scissors
  77: teddy bear
  78: hair drier
  79: toothbrush

download: |
 from ultralytics.utils.downloads import download
 from pathlib import Path
 import json
 import os

 # Download labels
 segments = True  # segment or box labels
 dir = Path(yaml['path'])  # dataset root dir
 url = 'https://github.com/ultralytics/assets/releases/download/v0.0.0/'
 urls = [url + ('coco2017labels-segments.zip' if segments else 'coco2017labels.zip')]  # labels
 download(urls, dir=dir)

 # Download val2017 images and annotations
 download('http://images.cocodataset.org/zips/val2017.zip', dir=dir / 'images', unzip=True)
 download('http://images.cocodataset.org/annotations/annotations_trainval2017.zip', dir=dir, unzip=True)

 # Prepare labels directory
 labels_dir = dir / 'labels' / 'val2017'
 labels_dir.mkdir(parents=True, exist_ok=True)

 # Load COCO annotations
 with open(dir / 'annotations' / 'instances_val2017.json', 'r') as f:
     coco_data = json.load(f)

 # Create category mapping
 category_map = {cat['id']: idx for idx, cat in enumerate(coco_data['categories'])}

 # Create YOLO format labels
 for img in coco_data['images']:
     img_id = img['id']
     img_filename = img['file_name']
     width, height = img['width'], img['height']
     
     label_content = []
     for ann in coco_data['annotations']:
         if ann['image_id'] == img_id:
             # Get category index using the mapping
             category_id = ann['category_id']
             if category_id not in category_map:
                 print(f"Skipping annotation with unknown category ID: {category_id}")
                 continue
             
             category_index = category_map[category_id]
             
             # Convert COCO bbox to YOLO format
             x, y, w, h = ann['bbox']
             x_center = (x + w / 2) / width
             y_center = (y + h / 2) / height
             bbox_width = w / width
             bbox_height = h / height
             
             label_content.append(f"{category_index} {x_center} {y_center} {bbox_width} {bbox_height}\n")
     
     # Write label file
     if label_content:
         label_path = labels_dir / f"{img_filename.replace('.jpg', '.txt')}"
         with open(label_path, 'w') as f:
             f.writelines(label_content)

 # Create val2017.txt with image paths
 image_dir = dir / 'images' / 'val2017'
 image_paths = [f'/kaggle/working/datasets/coco/images/val2017/{f}\n' for f in os.listdir(image_dir) if f.endswith('.jpg')]
 
 with open(dir / 'val2017.txt', 'w') as f:
     f.writelines(image_paths)
